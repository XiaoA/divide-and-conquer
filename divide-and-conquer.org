#+Title: Divide and Conquer
#+AUTHOR: Andrew Buckingham
#+STARTUP: indent
#+OPTIONS: num:nil toc:nil
#+TODO: TODO(t) | | Started(s) | Waiting(w) | Someday/Maybe(m) | Canceled(c) | DONE(d)(@) | Meeting(M) | Note(n

* 1) countZeroes
Given an array of 1s and 0s which has all 1s first followed by all 0s, write a function called countZeroes, which returns the number of zeroes in the array.

** Constraints:
 *Time Complexity: O(log N)*

***  Examples:

#+begin_src js
  countZeroes([1,1,1,1,0,0]) // 2
  countZeroes([1,0,0,0,0]) // 4
  countZeroes([0,0,0]) // 3
  countZeroes([1,1,1,1]) // 0
#+end_src

*** Solution

    #+begin_src js :tangle src/count_zeroes.js
      function countZeroes(array) {
        let firstZero = findFirstZero(array)
        if (firstZero === -1) return 0;

        return array.length - firstZero
      }

      function findFirstZero(array, start = 0, end = array.length - 1) {
        if (end >= start) {
          let middle = start + Math.floor((end - start) / 2)
          if ((middle === 0 || array[middle - 1] === 1) && array[middle] === 0) {
            return middle;
          } else if (array[middle] === 1) {
            return findFirstZero(array, middle + 1, end)
          }
          return findFirstZero(array, start, middle - 1)
        }
        return -1;
      }

    #+end_src



* 2) sortedFrequency
Given a sorted array and a number, write a function called sortedFrequency that counts the occurrences of the number in the array

** Constraints:
 *Time Complexity: O(log N)*

***  Examples:

  #+begin_src js 
  sortedFrequency([1,1,2,2,2,2,3],2) // 4
  sortedFrequency([1,1,2,2,2,2,3],3) // 1
  sortedFrequency([1,1,2,2,2,2,3],1) // 2
  sortedFrequency([1,1,2,2,2,2,3],4) // -1
  #+end_src

  
*** Solution
    #+begin_src js :tangle src/sorted_frequency.js
      function sortedFrequency(array, number) {
        let firstIndex = findFirstIndex(array, number);
        if (firstIndex == -1) return firstIndex;
        let lastIndex = findLastIndex(array, number);
        return lastIndex - firstIndex + 1;
      }

      function findFirstIndex(array, number, start = 0, end = array.length - 1) {
        if (end >= start) {
          let middle = Math.floor((start + end) / 2)
          if ((middle === 0 || number > array[middle - 1]) && array[middle] === number) {
            return middle;
          } else if (number > array[middle]) {
            return findFirstIndex(array, number, middle + 1, end)
          } else {
            return findFirstIndex(array, number, start, middle - 1)
          }
        }
        return -1
      }

      function findLastIndex(array, number, start = 0, end = array.length - 1) {
        if (end >= start) {
          let middle = Math.floor((start + end) / 2)
          if ((middle === array.length - 1 || number < array[middle + 1]) && array[middle] === number) {
            return middle;
          } else if (number < array[middle]) {
            return findLastIndex(array, number, start, middle - 1)
          } else {
            return findLastIndex(array, number, middle + 1, end)
          }
        }
        return -1
      }
    #+end_src

* 3) findRotatedIndex
Write a function called findRotatedIndex which accepts a rotated array of sorted numbers and an integer. The function should return the index of num in the array. If the value is not found, return -1.

**   Constraints:
 *Time Complexity: O(log N)*

***  Examples:

  #+begin_src js
  findRotatedIndex([3,4,1,2],4) // 1
  findRotatedIndex([6, 7, 8, 9, 1, 2, 3, 4], 8) // 2
  findRotatedIndex([6, 7, 8, 9, 1, 2, 3, 4], 3) // 6
  findRotatedIndex([37,44,66,102,10,22],14) // -1
  findRotatedIndex([6, 7, 8, 9, 1, 2, 3, 4], 12) // -1
  #+end_src

*** Solution

    #+begin_src js :tangle src/find_rotated_index.js
      function findRotatedIndex(array, number) {
        let pivot = findPivot(array)
        if (pivot > 0 && number >= array[0] && number <= array[pivot - 1]) {
          return binarySearch(array, number, 0, pivot - 1);
        } else {
          return binarySearch(array, number, pivot, array.length - 1);
        }
      }

      function binarySearch(array, number, start, end) {
        if (array.length === 0) return -1;
        if (number < array[start] || number > array[end]) return -1;

        while (start <= end) {
          let middle = Math.floor((start + end) / 2);
          if (array[middle] === number) {
            return middle;
          } else if (number < array[middle]) {
            end = middle - 1;
          } else {
            start = middle + 1;
          }
        }
        return -1;
      }

      function findPivot(array) {
        if (array.length === 1 || array[0] < array[array.length - 1]) return 0;
        let start = 0
        let end = array.length - 1;
        while (start <= end) {
          let middle = Math.floor((start + end) / 2);
          if (array[middle] > array[middle + 1]) return middle + 1
          else if (array[start] <= array[middle]) {
            start = middle + 1
          } else {
            end = middle - 1
          }
        }
      }
    #+end_src

* 4) findRotationCount
Write a function called findRotationCount which accepts an array of distinct numbers sorted in increasing order. The array has been rotated counter-clockwise n number of times. Given such an array, find the value of n.

**   Constraints:
 *Time Complexity: O(log N)*

***  Examples:

  #+begin_src js
    findRotationCount([15, 18, 2, 3, 6, 12]) // 2
    findRotationCount([7, 9, 11, 12, 5]) // 4
    findRotationCount([7, 9, 11, 12, 15]) // 0
  #+end_src

  
*** Solution
    #+begin_src js :tangle src/find_rotation_count.js
      function findRotationCount(array, start = 0, end = array.length - 1) {
        if (end < start) return 0;
        if (end === start) return start;
        let middle = Math.floor((start + end) / 2)

        if (middle < end && array[middle + 1] < array[middle])
          return middle + 1;

        if (middle > start && array[middle] < array[middle - 1]) {
          return middle;
        }

        if (array[end] > array[middle]) {
          return findRotationCount(array, start, middle - 1);
        }

        return findRotationCount(array, middle + 1, end);
      }


    #+end_src

* 5) findFloor
Write a function called findFloor which accepts a sorted array and a value x, and returns the floor of x in the array. The floor of x in an array is the largest element in the array which is smaller than or equal to x. If the floor does not exist, return -1.

***  Examples:

  #+begin_src js
  findFloor([1,2,8,10,10,12,19], 9) // 8
  findFloor([1,2,8,10,10,12,19], 20) // 19
  findFloor([1,2,8,10,10,12,19], 0) // -1
  #+end_src

** Constraints
 *Time Complexity: O(log N)*

 
*** Solution
    #+begin_src js :tangle src/find_floor.js
      function findFloor(array, number, start = 0, end = array.length - 1) {
        if (start > end) return -1;
        if (number >= array[end]) return array[end];

        let middle = Math.floor((start + end) / 2)

        if (array[middle] === number) return array[middle];

        if (middle > 0 && array[middle - 1] <= number && number < array[middle]) {
          return array[middle - 1];
        }

        if (number < array[middle]) {
          return findFloor(array, number, start, middle - 1);
        }

        return findFloor(array, number, middle + 1, end)
      }
    #+end_src
